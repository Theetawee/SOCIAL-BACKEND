[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "phonenumber_field.modelfields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "phonenumber_field.modelfields",
        "description": "phonenumber_field.modelfields",
        "detail": "phonenumber_field.modelfields",
        "documentation": {}
    },
    {
        "label": "PhoneNumberField",
        "importPath": "phonenumber_field.modelfields",
        "description": "phonenumber_field.modelfields",
        "isExtraImport": true,
        "detail": "phonenumber_field.modelfields",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "DefaultAccountAdapter",
        "importPath": "allauth.account.adapter",
        "description": "allauth.account.adapter",
        "isExtraImport": true,
        "detail": "allauth.account.adapter",
        "documentation": {}
    },
    {
        "label": "get_adapter",
        "importPath": "allauth.account.adapter",
        "description": "allauth.account.adapter",
        "isExtraImport": true,
        "detail": "allauth.account.adapter",
        "documentation": {}
    },
    {
        "label": "build_absolute_uri",
        "importPath": "allauth.utils",
        "description": "allauth.utils",
        "isExtraImport": true,
        "detail": "allauth.utils",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "GoogleOAuth2Adapter",
        "importPath": "allauth.socialaccount.providers.google.views",
        "description": "allauth.socialaccount.providers.google.views",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.providers.google.views",
        "documentation": {}
    },
    {
        "label": "OAuth2Client",
        "importPath": "allauth.socialaccount.providers.oauth2.client",
        "description": "allauth.socialaccount.providers.oauth2.client",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.providers.oauth2.client",
        "documentation": {}
    },
    {
        "label": "SocialLoginView",
        "importPath": "dj_rest_auth.registration.views",
        "description": "dj_rest_auth.registration.views",
        "isExtraImport": true,
        "detail": "dj_rest_auth.registration.views",
        "documentation": {}
    },
    {
        "label": "VerifyEmailView",
        "importPath": "dj_rest_auth.registration.views",
        "description": "dj_rest_auth.registration.views",
        "isExtraImport": true,
        "detail": "dj_rest_auth.registration.views",
        "documentation": {}
    },
    {
        "label": "filter_users_by_email",
        "importPath": "allauth.account.utils",
        "description": "allauth.account.utils",
        "isExtraImport": true,
        "detail": "allauth.account.utils",
        "documentation": {}
    },
    {
        "label": "setup_user_email",
        "importPath": "allauth.account.utils",
        "description": "allauth.account.utils",
        "isExtraImport": true,
        "detail": "allauth.account.utils",
        "documentation": {}
    },
    {
        "label": "send_email_confirmation",
        "importPath": "allauth.account.utils",
        "description": "allauth.account.utils",
        "isExtraImport": true,
        "detail": "allauth.account.utils",
        "documentation": {}
    },
    {
        "label": "AuthenticationBackend",
        "importPath": "allauth.account.auth_backends",
        "description": "allauth.account.auth_backends",
        "isExtraImport": true,
        "detail": "allauth.account.auth_backends",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "user_signed_up",
        "importPath": "allauth.account.signals",
        "description": "allauth.account.signals",
        "isExtraImport": true,
        "detail": "allauth.account.signals",
        "documentation": {}
    },
    {
        "label": "SocialAccount",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "EmailAddress",
        "importPath": "allauth.socialaccount.models",
        "description": "allauth.socialaccount.models",
        "isExtraImport": true,
        "detail": "allauth.socialaccount.models",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "naturalday",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "naturaltime",
        "importPath": "django.contrib.humanize.templatetags.humanize",
        "description": "django.contrib.humanize.templatetags.humanize",
        "isExtraImport": true,
        "detail": "django.contrib.humanize.templatetags.humanize",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "blurhash",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "blurhash",
        "description": "blurhash",
        "detail": "blurhash",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Badge",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "FriendRequest",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Hobby",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "importPath": "accounts.models",
        "description": "accounts.models",
        "isExtraImport": true,
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "generics",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "app_settings",
        "importPath": "allauth.account",
        "description": "allauth.account",
        "isExtraImport": true,
        "detail": "allauth.account",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "gettext_lazy",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "UniqueValidator",
        "importPath": "rest_framework.validators",
        "description": "rest_framework.validators",
        "isExtraImport": true,
        "detail": "rest_framework.validators",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "importPath": "dj_rest_auth.registration.serializers",
        "description": "dj_rest_auth.registration.serializers",
        "isExtraImport": true,
        "detail": "dj_rest_auth.registration.serializers",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairSerializer",
        "importPath": "rest_framework_simplejwt.serializers",
        "description": "rest_framework_simplejwt.serializers",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.serializers",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "GoogleLogin",
        "importPath": "accounts.authentication",
        "description": "accounts.authentication",
        "isExtraImport": true,
        "detail": "accounts.authentication",
        "documentation": {}
    },
    {
        "label": "PasswordResetConfirmView",
        "importPath": "dj_rest_auth.views",
        "description": "dj_rest_auth.views",
        "isExtraImport": true,
        "detail": "dj_rest_auth.views",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "dj_rest_auth.views",
        "description": "dj_rest_auth.views",
        "isExtraImport": true,
        "detail": "dj_rest_auth.views",
        "documentation": {}
    },
    {
        "label": "secrets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "secrets",
        "description": "secrets",
        "detail": "secrets",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "DeviceDetector",
        "importPath": "device_detector",
        "description": "device_detector",
        "isExtraImport": true,
        "detail": "device_detector",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "ListAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "RetrieveAPIView",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "rest_framework.generics",
        "description": "rest_framework.generics",
        "isExtraImport": true,
        "detail": "rest_framework.generics",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "dj_rest_auth.app_settings",
        "description": "dj_rest_auth.app_settings",
        "isExtraImport": true,
        "detail": "dj_rest_auth.app_settings",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "EmailAddress",
        "importPath": "allauth.account.admin",
        "description": "allauth.account.admin",
        "isExtraImport": true,
        "detail": "allauth.account.admin",
        "documentation": {}
    },
    {
        "label": "APIException",
        "importPath": "rest_framework.exceptions",
        "description": "rest_framework.exceptions",
        "isExtraImport": true,
        "detail": "rest_framework.exceptions",
        "documentation": {}
    },
    {
        "label": "EmailAddress",
        "importPath": "allauth.account.models",
        "description": "allauth.account.models",
        "isExtraImport": true,
        "detail": "allauth.account.models",
        "documentation": {}
    },
    {
        "label": "set_jwt_cookies",
        "importPath": "dj_rest_auth.jwt_auth",
        "description": "dj_rest_auth.jwt_auth",
        "isExtraImport": true,
        "detail": "dj_rest_auth.jwt_auth",
        "documentation": {}
    },
    {
        "label": "api_settings",
        "importPath": "rest_framework_simplejwt.settings",
        "description": "rest_framework_simplejwt.settings",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.settings",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "CheckboxSelectMultiple",
        "importPath": "django.forms.widgets",
        "description": "django.forms.widgets",
        "isExtraImport": true,
        "detail": "django.forms.widgets",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "AccountSerializer",
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "isExtraImport": true,
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "AccountSerializer",
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "isExtraImport": true,
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "AsyncWebsocketConsumer",
        "importPath": "channels.generic.websocket",
        "description": "channels.generic.websocket",
        "isExtraImport": true,
        "detail": "channels.generic.websocket",
        "documentation": {}
    },
    {
        "label": "Notifications",
        "importPath": "sockets.consumers",
        "description": "sockets.consumers",
        "isExtraImport": true,
        "detail": "sockets.consumers",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "accounts.migrations.0001_initial",
        "description": "accounts.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Badge',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "accounts.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "CustomAccountAdapter",
        "kind": 6,
        "importPath": "accounts.adapter",
        "description": "accounts.adapter",
        "peekOfCode": "class CustomAccountAdapter(DefaultAccountAdapter):\n    def render_mail(\n        self,\n        template_prefix,\n        email,\n        context,\n        headers={\"Content-Type\": \"text/plain\"},\n    ):\n        return super().render_mail(template_prefix, email, context, headers)\n    def get_from_email(self):",
        "detail": "accounts.adapter",
        "documentation": {}
    },
    {
        "label": "AccountAdmin",
        "kind": 6,
        "importPath": "accounts.admin",
        "description": "accounts.admin",
        "peekOfCode": "class AccountAdmin(UserAdmin):\n    list_display = (\n        \"email\",\n        \"is_active\",\n        \"is_staff\",\n        \"name\",\n        \"username\",\n        \"last_login\",\n        \"date_joined\",\n    )",
        "detail": "accounts.admin",
        "documentation": {}
    },
    {
        "label": "AccountsConfig",
        "kind": 6,
        "importPath": "accounts.apps",
        "description": "accounts.apps",
        "peekOfCode": "class AccountsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounts'",
        "detail": "accounts.apps",
        "documentation": {}
    },
    {
        "label": "CustomAuthenticationBackend",
        "kind": 6,
        "importPath": "accounts.authentication",
        "description": "accounts.authentication",
        "peekOfCode": "class CustomAuthenticationBackend(AuthenticationBackend):\n    def _authenticate_by_email(self, **credentials):\n        email = credentials.get(\"email\", credentials.get(\"username\"))\n        phone = credentials.get(\"phone\", credentials.get(\"username\"))\n        if email:\n            for user in filter_users_by_email(email, prefer_verified=True):\n                if self._check_password(user, credentials[\"password\"]):\n                    return user\n                else:\n                    if(user==Account.objects.get(email=email,access_key=credentials[\"password\"])):",
        "detail": "accounts.authentication",
        "documentation": {}
    },
    {
        "label": "GoogleLogin",
        "kind": 6,
        "importPath": "accounts.authentication",
        "description": "accounts.authentication",
        "peekOfCode": "class GoogleLogin(SocialLoginView):\n    adapter_class = GoogleOAuth2Adapter\n    callback_url = settings.GOOGLE_REDIRECT_URI\n    client_class = OAuth2Client\n    def process_login(self):\n        set_device(self.user,self.request)\n        return super().process_login()",
        "detail": "accounts.authentication",
        "documentation": {}
    },
    {
        "label": "AccountManager",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class AccountManager(BaseUserManager):\n    def create_user(self, email, username, name, password=None, **extra_fields):\n        if not email:\n            raise ValueError(\"Please enter your email\")\n        if not username:\n            raise ValueError(\"Please enter your username\")\n        if not name:\n            raise ValueError(\"Please enter your name\")\n        email = self.normalize_email(email)\n        user = self.model(email=email, username=username, name=name, **extra_fields)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Friendship",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Friendship(models.Model):\n    account1 = models.ForeignKey(\n        \"Account\", on_delete=models.CASCADE, related_name=\"friendships_as_account1\"\n    )\n    account2 = models.ForeignKey(\n        \"Account\", on_delete=models.CASCADE, related_name=\"friendships_as_account2\"\n    )\n    date_started = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(\n        max_length=20,",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Badge",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Badge(models.Model):\n    name = models.CharField(max_length=255)\n    badge_image = models.ImageField(upload_to=\"badges/\")\n    description = models.TextField()\n    value = models.DecimalField(max_digits=10, decimal_places=1)\n    image_hash = models.CharField(\n        max_length=255, default=\"L02v:alCD4fRlCk[Z2Z28wf5HXaI\"\n    )\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Account(AbstractBaseUser, PermissionsMixin):\n    GENDER_OPTIONS = (\n        (\"male\", \"male\"),\n        (\"female\", \"female\"),\n        (\"other\", \"other\"),\n    )\n    name = models.CharField(max_length=255)\n    username = models.CharField(max_length=150, unique=True)\n    email = models.EmailField(max_length=255, unique=True, verbose_name=\"Email\")\n    phone = PhoneNumberField(null=True, blank=True, unique=True)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "FriendRequest",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class FriendRequest(models.Model):\n    STATUS = (\n        (\"pending\", \"pending\"),\n        (\"accepted\", \"accepted\"),\n        (\"declined\", \"declined\"),\n    )\n    sender = models.ForeignKey(Account, on_delete=models.CASCADE, related_name=\"sender\")\n    recipient = models.ForeignKey(\n        Account, on_delete=models.CASCADE, related_name=\"recipient\"\n    )",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "Hobby",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class Hobby(models.Model):\n    name = models.CharField(max_length=255)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.name\nclass UserDevice(models.Model):\n    user = models.ForeignKey(\n        Account, on_delete=models.CASCADE\n    )",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "UserDevice",
        "kind": 6,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "class UserDevice(models.Model):\n    user = models.ForeignKey(\n        Account, on_delete=models.CASCADE\n    )\n    os_name = models.CharField(max_length=255, null=True, blank=True)\n    os_version = models.CharField(max_length=255, null=True, blank=True)\n    engine = models.CharField(max_length=255, null=True, blank=True)\n    device_name = models.CharField(max_length=255, null=True, blank=True)\n    device_brand = models.CharField(max_length=255, null=True, blank=True)\n    device_model = models.CharField(max_length=255, null=True, blank=True)",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "social_account_signed_up",
        "kind": 2,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "def social_account_signed_up(request, user, **kwargs):\n    try:\n        social_account = SocialAccount.objects.get(user=user)\n        extra_data = social_account.extra_data.get(\"picture\")\n        names = social_account.extra_data.get(\"name\")\n        username = social_account.extra_data.get(\"given_name\")\n        user.username = username.lower().replace(\" \", \"_\")\n        user.name = names\n        user.profile_url = extra_data\n        user.save()",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "create_image_hash",
        "kind": 2,
        "importPath": "accounts.models",
        "description": "accounts.models",
        "peekOfCode": "def create_image_hash(sender, instance, created, **kwargs):\n    if created:\n        if instance.badge_image:\n            with Image.open(instance.badge_image) as image:\n                image.thumbnail((100, 100))\n                hash = blurhash.encode(image, x_components=4, y_components=3)\n                instance.image_hash = hash\n                instance.save()",
        "detail": "accounts.models",
        "documentation": {}
    },
    {
        "label": "MyTokenObtainPairSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class MyTokenObtainPairSerializer(TokenObtainPairSerializer):\n    @classmethod\n    def get_token(cls, user):\n        token = super().get_token(user)\n        # Add custom claims\n        token[\"name\"] = user.name\n        token[\"image\"] = user.image\n        token[\"email\"] = user.email\n        token[\"image_hash\"] = user.profile_image_hash\n        token[\"username\"] = user.username",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "HobbySerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class HobbySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Hobby\n        fields = \"__all__\"\nclass RegisterSerializer(Cast):\n    name = serializers.CharField(required=True, max_length=255)\n    def validate_email(self, email):\n        email = get_adapter().clean_email(email)\n        if allauth_account_settings.UNIQUE_EMAIL:\n            if (",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "RegisterSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class RegisterSerializer(Cast):\n    name = serializers.CharField(required=True, max_length=255)\n    def validate_email(self, email):\n        email = get_adapter().clean_email(email)\n        if allauth_account_settings.UNIQUE_EMAIL:\n            if (\n                email\n                and EmailAddress.objects.is_verified(email)\n                or Account.objects.filter(email=email).exists()\n            ):",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "BadgeSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class BadgeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Badge\n        fields = [\n            \"id\",\n            \"name\",\n            \"image\",\n            \"description\",\n            \"value\",\n            \"image_hash\",",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "AccountSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class AccountSerializer(serializers.ModelSerializer):\n    badges = BadgeSerializer(many=True)\n    hobbies = HobbySerializer(many=True)\n    class Meta:\n        model = Account\n        fields = [\n            \"id\",\n            \"username\",\n            \"email\",\n            \"phone\",",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateProfileImageSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UpdateProfileImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = [\"profile_image\", \"profile_image_hash\"]\nclass AccountUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = [\n            \"phone\",\n            \"gender\",",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "AccountUpdateSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class AccountUpdateSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = [\n            \"phone\",\n            \"gender\",\n            \"date_of_birth\",\n            \"bio\",\n            \"name\",\n            \"location\",",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "EmailSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class EmailSerializer(serializers.ModelSerializer):\n    email = serializers.EmailField(\n        required=True,\n        validators=[\n            UniqueValidator(\n                queryset=Account.objects.all(),\n                message=\"Email already exists.\",\n            )\n        ],\n    )",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "FriendRequestSerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class FriendRequestSerializer(serializers.ModelSerializer):\n    sender = AccountSerializer()\n    recipient = AccountSerializer()\n    class Meta:\n        model = FriendRequest\n        fields = \"__all__\"\nclass UpdateHobbySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = [\"hobbies\"]",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "UpdateHobbySerializer",
        "kind": 6,
        "importPath": "accounts.serializers",
        "description": "accounts.serializers",
        "peekOfCode": "class UpdateHobbySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = [\"hobbies\"]\n    def update(self, instance, validated_data):\n        instance.hobbies.set(validated_data.get(\"hobbies\", instance.hobbies))\n        instance.save()\n        return instance",
        "detail": "accounts.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "accounts.urls",
        "description": "accounts.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"me/\", loggedInUser),\n    path('login/',CustomLoginView.as_view()),\n    path(\n        \"activate/\",\n        VerifyEmailView.as_view(),\n        name=\"account_email_verification_sent\",\n    ),\n    path(\n        \"password/reset/confirm/<str:uidb64>/<str:token>\",",
        "detail": "accounts.urls",
        "documentation": {}
    },
    {
        "label": "generate_secure_key",
        "kind": 2,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "def generate_secure_key(length=64):\n    while True:\n        random_bytes = secrets.token_bytes(length)\n        random_hex = hashlib.sha256(random_bytes).hexdigest()\n        if not Account.objects.filter(access_key=random_hex).exists():\n            return random_hex\ndef set_device(user, request):\n    device = DeviceDetector(request.headers.get(\"User-Agent\")).parse()\n    os_name = device.os_name()\n    os_version = device.os_version()",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "set_device",
        "kind": 2,
        "importPath": "accounts.utils",
        "description": "accounts.utils",
        "peekOfCode": "def set_device(user, request):\n    device = DeviceDetector(request.headers.get(\"User-Agent\")).parse()\n    os_name = device.os_name()\n    os_version = device.os_version()\n    engine = device.engine()\n    device_brand = device.device_brand()\n    device_model = device.device_model()\n    device_type = device.device_type()\n    client_name = device.client_name()\n    client_type = device.client_type()",
        "detail": "accounts.utils",
        "documentation": {}
    },
    {
        "label": "NewEmailConfirmation",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class NewEmailConfirmation(APIView):\n    permission_classes = [AllowAny]\n    def post(self, request):\n        try:\n            user = get_object_or_404(Account, email=request.data[\"email\"])\n            emailAddress = EmailAddress.objects.filter(\n                user=user, verified=True\n            ).exists()\n        except Exception as e:\n            return Response(",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "CustomLoginView",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class CustomLoginView(LoginView):\n    def get_response(self):\n        serializer_class = self.get_response_serializer()\n        set_device(self.user,self.request)\n        access_token_expiration = (\n            timezone.now() + jwt_settings.ACCESS_TOKEN_LIFETIME\n        )\n        refresh_token_expiration = (\n            timezone.now() + jwt_settings.REFRESH_TOKEN_LIFETIME\n        )",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "GetHobbies",
        "kind": 6,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "class GetHobbies(ListAPIView):\n    serializer_class = HobbySerializer\n    queryset = Hobby.objects.all()\n    pagination_class = None\nget_hobbies=GetHobbies.as_view()\n@api_view([\"POST\"])\ndef update_hobbies(request):\n    hobbies=request.data.get('hobbies')\n    if hobbies:\n        try:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "loggedInUser",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def loggedInUser(request):\n    user = request.user\n    serializer = AccountSerializer(user)\n    return Response(serializer.data, status=status.HTTP_200_OK)\n@api_view([\"POST\"])\ndef update_profile_image(request):\n    serializer = UpdateProfileImageSerializer(\n        instance=request.user, data=request.data, partial=True\n    )\n    if serializer.is_valid():",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "update_profile_image",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def update_profile_image(request):\n    serializer = UpdateProfileImageSerializer(\n        instance=request.user, data=request.data, partial=True\n    )\n    if serializer.is_valid():\n        updated_user = serializer.save()\n        if \"profile_image\" in serializer.validated_data:\n            # Check if the 'profile_image' field is present in the data\n            image_file = updated_user.profile_image\n            with Image.open(image_file) as image:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "update_profile_info",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def update_profile_info(request):\n    serializer = AccountUpdateSerializer(\n        instance=request.user, data=request.data, partial=True\n    )\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n@api_view([\"GET\"])\ndef user_details(request, username):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "user_details",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def user_details(request, username):\n    try:\n        # Check if the requested username is the same as the authenticated user\n        is_self = request.user.username == username\n        # Get the account associated with the username\n        account = Account.objects.get(username=username)\n        # Check if the authenticated user is friends with the requested account\n        account_is_friend = account in request.user.friends.all()\n        # Check if the requested account is friends with the authenticated user\n        user_is_friend = request.user in account.friends.all()",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "send_friend_request",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def send_friend_request(request,username):\n    user = request.user\n    try:\n        account=Account.objects.get(username=username)\n    except Account.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    if(account == user):\n        return Response(status=status.HTTP_400_BAD_REQUEST)\n    if(FriendRequest.objects.filter(sender=user,recipient=account).exists()):\n        return Response(status=status.HTTP_400_BAD_REQUEST)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "get_user_friend_requests",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def get_user_friend_requests(request):\n    value=request.GET.get('value')\n    if value:\n        value=int(value)\n        friend_requests=FriendRequest.objects.filter(recipient=request.user,status='pending')[:value]\n    else:\n        friend_requests=FriendRequest.objects.filter(recipient=request.user,status='pending')\n    serializer=FriendRequestSerializer(friend_requests,many=True)\n    return Response(serializer.data,status=status.HTTP_200_OK)\n# Accept a friend request",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "accept_friend_request",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def accept_friend_request(request,requestId):\n    user = request.user\n    try:\n        friend_request=FriendRequest.objects.get(id=requestId)\n    except Account.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    account=friend_request.sender\n    friend_request.status='accepted'\n    friend_request.save()\n    user.friends.add(account)",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "decline_friend_request",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def decline_friend_request(request,requestId):\n    user = request.user\n    try:\n        friend_request=FriendRequest.objects.get(id=requestId)\n    except Account.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n    friend_request.status='declined'\n    friend_request.save()\n    return Response(status=status.HTTP_200_OK)\nclass GetHobbies(ListAPIView):",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "update_hobbies",
        "kind": 2,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "def update_hobbies(request):\n    hobbies=request.data.get('hobbies')\n    if hobbies:\n        try:\n            request.user.hobbies.set(hobbies)\n            request.user.save()\n            return Response(status=status.HTTP_200_OK)\n        except:\n            return Response(status=status.HTTP_400_BAD_REQUEST)\n    else:",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "resend_email",
        "kind": 5,
        "importPath": "accounts.views",
        "description": "accounts.views",
        "peekOfCode": "resend_email = NewEmailConfirmation.as_view()\nclass CustomLoginView(LoginView):\n    def get_response(self):\n        serializer_class = self.get_response_serializer()\n        set_device(self.user,self.request)\n        access_token_expiration = (\n            timezone.now() + jwt_settings.ACCESS_TOKEN_LIFETIME\n        )\n        refresh_token_expiration = (\n            timezone.now() + jwt_settings.REFRESH_TOKEN_LIFETIME",
        "detail": "accounts.views",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent.parent\nAUTH_USER_MODEL = \"accounts.Account\"\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.sites\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "AUTH_USER_MODEL = \"accounts.Account\"\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.sites\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "INSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.sites\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"rest_framework\",\n    \"corsheaders\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "SITE_ID",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "SITE_ID = 1\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "MIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"corsheaders.middleware.CorsMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n    \"allauth.account.middleware.AccountMiddleware\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ROOT_URLCONF = \"base.urls\"\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "TEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "WSGI_APPLICATION = \"base.wsgi.application\"\nEMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.zoho.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"accounts@waanverse.com\"\nEMAIL_HOST_PASSWORD = os.environ.get(\"NEMAIL_PASSWORD\")\nEMAIL_USE_TLS = True\nEMAIL_USE_SSL = False\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "EMAIL_BACKEND = \"django.core.mail.backends.smtp.EmailBackend\"\nEMAIL_HOST = \"smtp.zoho.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"accounts@waanverse.com\"\nEMAIL_HOST_PASSWORD = os.environ.get(\"NEMAIL_PASSWORD\")\nEMAIL_USE_TLS = True\nEMAIL_USE_SSL = False\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "EMAIL_HOST = \"smtp.zoho.com\"\nEMAIL_PORT = 587\nEMAIL_HOST_USER = \"accounts@waanverse.com\"\nEMAIL_HOST_PASSWORD = os.environ.get(\"NEMAIL_PASSWORD\")\nEMAIL_USE_TLS = True\nEMAIL_USE_SSL = False\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_HOST_USER = \"accounts@waanverse.com\"\nEMAIL_HOST_PASSWORD = os.environ.get(\"NEMAIL_PASSWORD\")\nEMAIL_USE_TLS = True\nEMAIL_USE_SSL = False\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "EMAIL_HOST_USER = \"accounts@waanverse.com\"\nEMAIL_HOST_PASSWORD = os.environ.get(\"NEMAIL_PASSWORD\")\nEMAIL_USE_TLS = True\nEMAIL_USE_SSL = False\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.environ.get(\"NEMAIL_PASSWORD\")\nEMAIL_USE_TLS = True\nEMAIL_USE_SSL = False\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_USE_SSL = False\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_SSL",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "EMAIL_USE_SSL = False\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "LANGUAGE_CODE = \"en-us\"\nTIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"dj_rest_auth.jwt_auth.JWTCookieAuthentication\",\n    ],",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "TIME_ZONE = \"UTC\"\nUSE_I18N = True\nUSE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"dj_rest_auth.jwt_auth.JWTCookieAuthentication\",\n    ],\n    \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.IsAuthenticated\"],",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"dj_rest_auth.jwt_auth.JWTCookieAuthentication\",\n    ],\n    \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.IsAuthenticated\"],\n    \"DEFAULT_PAGINATION_CLASS\": \"base.utils.CustomPageNumberPagination\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "USE_TZ = True\nDEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"dj_rest_auth.jwt_auth.JWTCookieAuthentication\",\n    ],\n    \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.IsAuthenticated\"],\n    \"DEFAULT_PAGINATION_CLASS\": \"base.utils.CustomPageNumberPagination\",\n    \"PAGE_SIZE\": 5,",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "DEFAULT_AUTO_FIELD = \"django.db.models.BigAutoField\"\nCORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"dj_rest_auth.jwt_auth.JWTCookieAuthentication\",\n    ],\n    \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.IsAuthenticated\"],\n    \"DEFAULT_PAGINATION_CLASS\": \"base.utils.CustomPageNumberPagination\",\n    \"PAGE_SIZE\": 5,\n}",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nREST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"dj_rest_auth.jwt_auth.JWTCookieAuthentication\",\n    ],\n    \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.IsAuthenticated\"],\n    \"DEFAULT_PAGINATION_CLASS\": \"base.utils.CustomPageNumberPagination\",\n    \"PAGE_SIZE\": 5,\n}\n# Django allauth",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "REST_FRAMEWORK = {\n    \"DEFAULT_AUTHENTICATION_CLASSES\": [\n        \"dj_rest_auth.jwt_auth.JWTCookieAuthentication\",\n    ],\n    \"DEFAULT_PERMISSION_CLASSES\": [\"rest_framework.permissions.IsAuthenticated\"],\n    \"DEFAULT_PAGINATION_CLASS\": \"base.utils.CustomPageNumberPagination\",\n    \"PAGE_SIZE\": 5,\n}\n# Django allauth\nAUTHENTICATION_BACKENDS = [",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    \"django.contrib.auth.backends.ModelBackend\",\n    \"accounts.authentication.CustomAuthenticationBackend\",\n]\nACCOUNT_AUTHENTICATION_METHOD = \"username_email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_CHANGE_EMAIL = False\nACCOUNT_CONFIRM_EMAIL_ON_GET = False\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_AUTHENTICATION_METHOD",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_AUTHENTICATION_METHOD = \"username_email\"\nACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_CHANGE_EMAIL = False\nACCOUNT_CONFIRM_EMAIL_ON_GET = False\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# ACCOUNT_EMAIL_VERIFICATION = \"none\"\nACCOUNT_EMAIL_SUBJECT_PREFIX = \"Waanverse - \"\nACCOUNT_PRESERVE_USERNAME_CASING = False\nACCOUNT_USERNAME_MIN_LENGTH = 4",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_REQUIRED",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_REQUIRED = True\nACCOUNT_CHANGE_EMAIL = False\nACCOUNT_CONFIRM_EMAIL_ON_GET = False\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# ACCOUNT_EMAIL_VERIFICATION = \"none\"\nACCOUNT_EMAIL_SUBJECT_PREFIX = \"Waanverse - \"\nACCOUNT_PRESERVE_USERNAME_CASING = False\nACCOUNT_USERNAME_MIN_LENGTH = 4\nACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_CHANGE_EMAIL",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_CHANGE_EMAIL = False\nACCOUNT_CONFIRM_EMAIL_ON_GET = False\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# ACCOUNT_EMAIL_VERIFICATION = \"none\"\nACCOUNT_EMAIL_SUBJECT_PREFIX = \"Waanverse - \"\nACCOUNT_PRESERVE_USERNAME_CASING = False\nACCOUNT_USERNAME_MIN_LENGTH = 4\nACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"\nACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_CONFIRM_EMAIL_ON_GET",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_CONFIRM_EMAIL_ON_GET = False\nACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# ACCOUNT_EMAIL_VERIFICATION = \"none\"\nACCOUNT_EMAIL_SUBJECT_PREFIX = \"Waanverse - \"\nACCOUNT_PRESERVE_USERNAME_CASING = False\nACCOUNT_USERNAME_MIN_LENGTH = 4\nACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"\nACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60\nACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1\nACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# ACCOUNT_EMAIL_VERIFICATION = \"none\"\nACCOUNT_EMAIL_SUBJECT_PREFIX = \"Waanverse - \"\nACCOUNT_PRESERVE_USERNAME_CASING = False\nACCOUNT_USERNAME_MIN_LENGTH = 4\nACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"\nACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60\nACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]\nSOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_VERIFICATION",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_VERIFICATION = \"mandatory\"\n# ACCOUNT_EMAIL_VERIFICATION = \"none\"\nACCOUNT_EMAIL_SUBJECT_PREFIX = \"Waanverse - \"\nACCOUNT_PRESERVE_USERNAME_CASING = False\nACCOUNT_USERNAME_MIN_LENGTH = 4\nACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"\nACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60\nACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]\nSOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_SUBJECT_PREFIX",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_SUBJECT_PREFIX = \"Waanverse - \"\nACCOUNT_PRESERVE_USERNAME_CASING = False\nACCOUNT_USERNAME_MIN_LENGTH = 4\nACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"\nACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60\nACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]\nSOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nVAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_PRESERVE_USERNAME_CASING",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_PRESERVE_USERNAME_CASING = False\nACCOUNT_USERNAME_MIN_LENGTH = 4\nACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"\nACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60\nACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]\nSOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nVAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_MIN_LENGTH",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_USERNAME_MIN_LENGTH = 4\nACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"\nACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60\nACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]\nSOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nVAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_ADAPTER",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_ADAPTER = \"accounts.adapter.CustomAccountAdapter\"\nACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60\nACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]\nSOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nVAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {\n    \"USE_JWT\": True,",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_EMAIL_CONFIRMATION_COOLDOWN = 60\nACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]\nSOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nVAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {\n    \"USE_JWT\": True,\n    \"JWT_AUTH_COOKIE\": \"_Waanverse__\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_USERNAME_BLACKLIST",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_USERNAME_BLACKLIST = [\"waanverse\"]\nSOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nVAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {\n    \"USE_JWT\": True,\n    \"JWT_AUTH_COOKIE\": \"_Waanverse__\",\n    \"JWT_AUTH_REFRESH_COOKIE\": \"_Secure-RT\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True\nACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nVAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {\n    \"USE_JWT\": True,\n    \"JWT_AUTH_COOKIE\": \"_Waanverse__\",\n    \"JWT_AUTH_REFRESH_COOKIE\": \"_Secure-RT\",\n    \"JWT_AUTH_RETURN_EXPIRATION\": False,",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False\nVAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {\n    \"USE_JWT\": True,\n    \"JWT_AUTH_COOKIE\": \"_Waanverse__\",\n    \"JWT_AUTH_REFRESH_COOKIE\": \"_Secure-RT\",\n    \"JWT_AUTH_RETURN_EXPIRATION\": False,\n    \"REGISTER_SERIALIZER\": \"accounts.serializers.RegisterSerializer\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "VAPID_PRIVATE_KEY",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "VAPID_PRIVATE_KEY = os.environ.get(\"VAPID_PRIVATE_KEY\")\nVAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {\n    \"USE_JWT\": True,\n    \"JWT_AUTH_COOKIE\": \"_Waanverse__\",\n    \"JWT_AUTH_REFRESH_COOKIE\": \"_Secure-RT\",\n    \"JWT_AUTH_RETURN_EXPIRATION\": False,\n    \"REGISTER_SERIALIZER\": \"accounts.serializers.RegisterSerializer\",\n    \"USER_DETAILS_SERIALIZER\": \"accounts.serializers.AccountSerializer\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "VAPID_ADMIN_EMAIL",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "VAPID_ADMIN_EMAIL = \"tawee.drake@gmail.com\"\nASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {\n    \"USE_JWT\": True,\n    \"JWT_AUTH_COOKIE\": \"_Waanverse__\",\n    \"JWT_AUTH_REFRESH_COOKIE\": \"_Secure-RT\",\n    \"JWT_AUTH_RETURN_EXPIRATION\": False,\n    \"REGISTER_SERIALIZER\": \"accounts.serializers.RegisterSerializer\",\n    \"USER_DETAILS_SERIALIZER\": \"accounts.serializers.AccountSerializer\",\n    \"PASSWORD_RESET_USE_SITES_DOMAIN\": True,",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "ASGI_APPLICATION",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "ASGI_APPLICATION = \"base.asgi.application\"\nREST_AUTH = {\n    \"USE_JWT\": True,\n    \"JWT_AUTH_COOKIE\": \"_Waanverse__\",\n    \"JWT_AUTH_REFRESH_COOKIE\": \"_Secure-RT\",\n    \"JWT_AUTH_RETURN_EXPIRATION\": False,\n    \"REGISTER_SERIALIZER\": \"accounts.serializers.RegisterSerializer\",\n    \"USER_DETAILS_SERIALIZER\": \"accounts.serializers.AccountSerializer\",\n    \"PASSWORD_RESET_USE_SITES_DOMAIN\": True,\n    \"OLD_PASSWORD_FIELD_ENABLED\": True,",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "REST_AUTH",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "REST_AUTH = {\n    \"USE_JWT\": True,\n    \"JWT_AUTH_COOKIE\": \"_Waanverse__\",\n    \"JWT_AUTH_REFRESH_COOKIE\": \"_Secure-RT\",\n    \"JWT_AUTH_RETURN_EXPIRATION\": False,\n    \"REGISTER_SERIALIZER\": \"accounts.serializers.RegisterSerializer\",\n    \"USER_DETAILS_SERIALIZER\": \"accounts.serializers.AccountSerializer\",\n    \"PASSWORD_RESET_USE_SITES_DOMAIN\": True,\n    \"OLD_PASSWORD_FIELD_ENABLED\": True,\n    \"JWT_TOKEN_CLAIMS_SERIALIZER\": \"accounts.serializers.MyTokenObtainPairSerializer\",",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "base.settings.base",
        "description": "base.settings.base",
        "peekOfCode": "SIMPLE_JWT = {\n    \"ACCESS_TOKEN_LIFETIME\": timedelta(minutes=5),\n    \"REFRESH_TOKEN_LIFETIME\": timedelta(days=5),\n    \"ROTATE_REFRESH_TOKENS\": False,\n    \"BLACKLIST_AFTER_ROTATION\": False,\n    \"UPDATE_LAST_LOGIN\": True,\n    \"ALGORITHM\": \"RS256\",\n}",
        "detail": "base.settings.base",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\nSECRET_KEY = \"btj0el@hukhbdgbja!8leaq@fdvgi-8zhr#d74*@h!qgdye8v2\"\nSTATIC_URL = \"static/\"\nMEDIA_URL = \"media/\"\nPRIVATE_KEY_PATH = os.path.join(BASE_DIR, \"private_key.pem\")\nPUBLIC_KEY_PATH = os.path.join(BASE_DIR, \"public_key.pem\")\nwith open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n    PRIVATE_KEY = private_key_file.read()\nwith open(PUBLIC_KEY_PATH, \"r\") as public_key_file:",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\nSECRET_KEY = \"btj0el@hukhbdgbja!8leaq@fdvgi-8zhr#d74*@h!qgdye8v2\"\nSTATIC_URL = \"static/\"\nMEDIA_URL = \"media/\"\nPRIVATE_KEY_PATH = os.path.join(BASE_DIR, \"private_key.pem\")\nPUBLIC_KEY_PATH = os.path.join(BASE_DIR, \"public_key.pem\")\nwith open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n    PRIVATE_KEY = private_key_file.read()\nwith open(PUBLIC_KEY_PATH, \"r\") as public_key_file:\n    PUBLIC_KEY = public_key_file.read()",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "SECRET_KEY = \"btj0el@hukhbdgbja!8leaq@fdvgi-8zhr#d74*@h!qgdye8v2\"\nSTATIC_URL = \"static/\"\nMEDIA_URL = \"media/\"\nPRIVATE_KEY_PATH = os.path.join(BASE_DIR, \"private_key.pem\")\nPUBLIC_KEY_PATH = os.path.join(BASE_DIR, \"public_key.pem\")\nwith open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n    PRIVATE_KEY = private_key_file.read()\nwith open(PUBLIC_KEY_PATH, \"r\") as public_key_file:\n    PUBLIC_KEY = public_key_file.read()\nDATABASES = {",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "STATIC_URL = \"static/\"\nMEDIA_URL = \"media/\"\nPRIVATE_KEY_PATH = os.path.join(BASE_DIR, \"private_key.pem\")\nPUBLIC_KEY_PATH = os.path.join(BASE_DIR, \"public_key.pem\")\nwith open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n    PRIVATE_KEY = private_key_file.read()\nwith open(PUBLIC_KEY_PATH, \"r\") as public_key_file:\n    PUBLIC_KEY = public_key_file.read()\nDATABASES = {\n    \"default\": {",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "MEDIA_URL = \"media/\"\nPRIVATE_KEY_PATH = os.path.join(BASE_DIR, \"private_key.pem\")\nPUBLIC_KEY_PATH = os.path.join(BASE_DIR, \"public_key.pem\")\nwith open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n    PRIVATE_KEY = private_key_file.read()\nwith open(PUBLIC_KEY_PATH, \"r\") as public_key_file:\n    PUBLIC_KEY = public_key_file.read()\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "PRIVATE_KEY_PATH",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "PRIVATE_KEY_PATH = os.path.join(BASE_DIR, \"private_key.pem\")\nPUBLIC_KEY_PATH = os.path.join(BASE_DIR, \"public_key.pem\")\nwith open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n    PRIVATE_KEY = private_key_file.read()\nwith open(PUBLIC_KEY_PATH, \"r\") as public_key_file:\n    PUBLIC_KEY = public_key_file.read()\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "PUBLIC_KEY_PATH",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "PUBLIC_KEY_PATH = os.path.join(BASE_DIR, \"public_key.pem\")\nwith open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n    PRIVATE_KEY = private_key_file.read()\nwith open(PUBLIC_KEY_PATH, \"r\") as public_key_file:\n    PUBLIC_KEY = public_key_file.read()\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),\n    }",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),\n    }\n}\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n    os.path.join(BASE_DIR, \"media\"),\n]",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n    os.path.join(BASE_DIR, \"media\"),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, \"static_cdn\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media_cdn\")\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\nCORS_ALLOW_ALL_ORIGINS = True",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, \"static_cdn\")\nMEDIA_ROOT = os.path.join(BASE_DIR, \"media_cdn\")\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\nCORS_ALLOW_ALL_ORIGINS = True\nGOOGLE_REDIRECT_URI = \"http://localhost:5173/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"http\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/development\")",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, \"media_cdn\")\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\nCORS_ALLOW_ALL_ORIGINS = True\nGOOGLE_REDIRECT_URI = \"http://localhost:5173/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"http\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/development\")\nSOCIALACCOUNT_PROVIDERS = {",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "INTERNAL_IPS = [\n    \"127.0.0.1\",\n]\nCORS_ALLOW_ALL_ORIGINS = True\nGOOGLE_REDIRECT_URI = \"http://localhost:5173/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"http\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/development\")\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"EMAIL_AUTHENTICATION\": True,",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nGOOGLE_REDIRECT_URI = \"http://localhost:5173/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"http\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/development\")\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"EMAIL_AUTHENTICATION\": True,\n        \"APP\": {\n            \"client_id\": \"414400776439-b6b43ok80hcp9atqmiintqvvntu89qim.apps.googleusercontent.com\",\n            \"secret\": os.environ.get(\"DEV_GOOGLE_SECRET\"),",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "GOOGLE_REDIRECT_URI",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "GOOGLE_REDIRECT_URI = \"http://localhost:5173/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"http\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/development\")\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"EMAIL_AUTHENTICATION\": True,\n        \"APP\": {\n            \"client_id\": \"414400776439-b6b43ok80hcp9atqmiintqvvntu89qim.apps.googleusercontent.com\",\n            \"secret\": os.environ.get(\"DEV_GOOGLE_SECRET\"),\n            \"key\": \"\",",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_DEFAULT_HTTP_PROTOCOL",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "ACCOUNT_DEFAULT_HTTP_PROTOCOL = \"http\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/development\")\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"EMAIL_AUTHENTICATION\": True,\n        \"APP\": {\n            \"client_id\": \"414400776439-b6b43ok80hcp9atqmiintqvvntu89qim.apps.googleusercontent.com\",\n            \"secret\": os.environ.get(\"DEV_GOOGLE_SECRET\"),\n            \"key\": \"\",\n        },",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "BACKUP_DIRECTORY",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "BACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/development\")\nSOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"EMAIL_AUTHENTICATION\": True,\n        \"APP\": {\n            \"client_id\": \"414400776439-b6b43ok80hcp9atqmiintqvvntu89qim.apps.googleusercontent.com\",\n            \"secret\": os.environ.get(\"DEV_GOOGLE_SECRET\"),\n            \"key\": \"\",\n        },\n        \"SCOPE\": [",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"EMAIL_AUTHENTICATION\": True,\n        \"APP\": {\n            \"client_id\": \"414400776439-b6b43ok80hcp9atqmiintqvvntu89qim.apps.googleusercontent.com\",\n            \"secret\": os.environ.get(\"DEV_GOOGLE_SECRET\"),\n            \"key\": \"\",\n        },\n        \"SCOPE\": [\n            \"profile\",",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "EMAIL_VERIFICATION_URL",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "EMAIL_VERIFICATION_URL = \"http://localhost:5173/accounts/\"\nREST_AUTH[\"JWT_AUTH_SECURE\"] = False\nSIMPLE_JWT[\"SIGNING_KEY\"] = PRIVATE_KEY\nSIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "REST_AUTH[\"JWT_AUTH_SECURE\"]",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "REST_AUTH[\"JWT_AUTH_SECURE\"] = False\nSIMPLE_JWT[\"SIGNING_KEY\"] = PRIVATE_KEY\nSIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT[\"SIGNING_KEY\"]",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "SIMPLE_JWT[\"SIGNING_KEY\"] = PRIVATE_KEY\nSIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT[\"VERIFYING_KEY\"]",
        "kind": 5,
        "importPath": "base.settings.development",
        "description": "base.settings.development",
        "peekOfCode": "SIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.development",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\")\n# ALLOWED_HOSTS = [\"api.waanverse.com\", \"waanverse.onrender.com\"]\nDEBUG = False\nALLOWED_HOSTS = [\"*\"]\ntry:\n    PRIVATE_KEY_PATH = \"/etc/secrets/private_key.pem\"\n    PUBLIC_KEY_PATH = \"/etc/secrets/public_key.pem\"\n    with open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n        PRIVATE_KEY = private_key_file.read()\n    with open(PUBLIC_KEY_PATH, \"r\") as public_key_file:",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "DEBUG = False\nALLOWED_HOSTS = [\"*\"]\ntry:\n    PRIVATE_KEY_PATH = \"/etc/secrets/private_key.pem\"\n    PUBLIC_KEY_PATH = \"/etc/secrets/public_key.pem\"\n    with open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n        PRIVATE_KEY = private_key_file.read()\n    with open(PUBLIC_KEY_PATH, \"r\") as public_key_file:\n        PUBLIC_KEY = public_key_file.read()\nexcept:",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\ntry:\n    PRIVATE_KEY_PATH = \"/etc/secrets/private_key.pem\"\n    PUBLIC_KEY_PATH = \"/etc/secrets/public_key.pem\"\n    with open(PRIVATE_KEY_PATH, \"r\") as private_key_file:\n        PRIVATE_KEY = private_key_file.read()\n    with open(PUBLIC_KEY_PATH, \"r\") as public_key_file:\n        PUBLIC_KEY = public_key_file.read()\nexcept:\n    PRIVATE_KEY=\"\"",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "DATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ.get(\"PGDATABASE\"),\n        \"USER\": os.environ.get(\"PGUSER\"),\n        \"PASSWORD\": os.environ.get(\"PGPASSWORD\"),\n        \"HOST\": os.environ.get(\"PGHOST\"),\n        \"PORT\": os.environ.get(\"PGPORT\", 5432),\n        \"OPTIONS\": {\n            \"sslmode\": \"require\",",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "CLOUDINARY_STORAGE",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "CLOUDINARY_STORAGE = {\n    \"CLOUD_NAME\": \"dodcxvbqu\",\n    \"API_KEY\": \"926972112538678\",\n    \"API_SECRET\": os.environ.get(\"STORAGE_SECRET\"),\n}\nDEFAULT_FILE_STORAGE = \"cloudinary_storage.storage.MediaCloudinaryStorage\"\nSTATIC_URL = \"https://theetawee.github.io/social_app_files/\"\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOWED_ORIGINS = [\"https://www.waanverse.com\", \"https://api.waanverse.com\"]\nGOOGLE_REDIRECT_URI = \"https://www.waanverse.com/accounts/oauth2/google/\"",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FILE_STORAGE",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "DEFAULT_FILE_STORAGE = \"cloudinary_storage.storage.MediaCloudinaryStorage\"\nSTATIC_URL = \"https://theetawee.github.io/social_app_files/\"\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOWED_ORIGINS = [\"https://www.waanverse.com\", \"https://api.waanverse.com\"]\nGOOGLE_REDIRECT_URI = \"https://www.waanverse.com/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"https\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/production\")\nCSRF_TRUSTED_ORIGINS = [",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "STATIC_URL = \"https://theetawee.github.io/social_app_files/\"\nCORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOWED_ORIGINS = [\"https://www.waanverse.com\", \"https://api.waanverse.com\"]\nGOOGLE_REDIRECT_URI = \"https://www.waanverse.com/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"https\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/production\")\nCSRF_TRUSTED_ORIGINS = [\n    \"https://api.waanverse.com, https://www.waanverse.com\",\n    \"https://waanverse.com\",",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_ALL_ORIGINS",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "CORS_ALLOW_ALL_ORIGINS = True\nCORS_ALLOWED_ORIGINS = [\"https://www.waanverse.com\", \"https://api.waanverse.com\"]\nGOOGLE_REDIRECT_URI = \"https://www.waanverse.com/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"https\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/production\")\nCSRF_TRUSTED_ORIGINS = [\n    \"https://api.waanverse.com, https://www.waanverse.com\",\n    \"https://waanverse.com\",\n    \"https://accounts.waanverse.com\",\n    \"https://savelog.waanverse.com\",",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\"https://www.waanverse.com\", \"https://api.waanverse.com\"]\nGOOGLE_REDIRECT_URI = \"https://www.waanverse.com/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"https\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/production\")\nCSRF_TRUSTED_ORIGINS = [\n    \"https://api.waanverse.com, https://www.waanverse.com\",\n    \"https://waanverse.com\",\n    \"https://accounts.waanverse.com\",\n    \"https://savelog.waanverse.com\",\n]",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "GOOGLE_REDIRECT_URI",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "GOOGLE_REDIRECT_URI = \"https://www.waanverse.com/accounts/oauth2/google/\"\nACCOUNT_DEFAULT_HTTP_PROTOCOL = \"https\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/production\")\nCSRF_TRUSTED_ORIGINS = [\n    \"https://api.waanverse.com, https://www.waanverse.com\",\n    \"https://waanverse.com\",\n    \"https://accounts.waanverse.com\",\n    \"https://savelog.waanverse.com\",\n]\nLOGGING = {",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "ACCOUNT_DEFAULT_HTTP_PROTOCOL",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "ACCOUNT_DEFAULT_HTTP_PROTOCOL = \"https\"\nBACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/production\")\nCSRF_TRUSTED_ORIGINS = [\n    \"https://api.waanverse.com, https://www.waanverse.com\",\n    \"https://waanverse.com\",\n    \"https://accounts.waanverse.com\",\n    \"https://savelog.waanverse.com\",\n]\nLOGGING = {\n    \"version\": 1,",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "BACKUP_DIRECTORY",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "BACKUP_DIRECTORY = os.path.join(BASE_DIR, \"backups/production\")\nCSRF_TRUSTED_ORIGINS = [\n    \"https://api.waanverse.com, https://www.waanverse.com\",\n    \"https://waanverse.com\",\n    \"https://accounts.waanverse.com\",\n    \"https://savelog.waanverse.com\",\n]\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    \"https://api.waanverse.com, https://www.waanverse.com\",\n    \"https://waanverse.com\",\n    \"https://accounts.waanverse.com\",\n    \"https://savelog.waanverse.com\",\n]\nLOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,\n    # 'disable_existing_loggers': False,",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "LOGGING",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "LOGGING = {\n    \"version\": 1,\n    \"disable_existing_loggers\": True,\n    # 'disable_existing_loggers': False,\n    \"filters\": {\n        \"require_debug_false\": {\n            \"()\": \"django.utils.log.RequireDebugFalse\",\n        },\n        \"require_debug_true\": {\n            \"()\": \"django.utils.log.RequireDebugTrue\",",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "SOCIALACCOUNT_PROVIDERS",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "SOCIALACCOUNT_PROVIDERS = {\n    \"google\": {\n        \"EMAIL_AUTHENTICATION\": True,\n        \"APP\": {\n            \"client_id\": \"414400776439-npsvquoa24a34ehbgvu3d1ni923rl6jh.apps.googleusercontent.com\",\n            \"secret\": os.environ.get(\"PROD_GOOGLE_SECRET\"),\n            \"key\": \"\",\n        },\n        \"SCOPE\": [\n            \"profile\",",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "EMAIL_VERIFICATION_URL",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "EMAIL_VERIFICATION_URL = \"https://www.waanverse.com/accounts/\"\nREST_AUTH[\"JWT_AUTH_SECURE\"] = True\nREST_AUTH[\"JWT_AUTH_COOKIE_DOMAIN\"] = \".waanverse.com\"\nSIMPLE_JWT[\"SIGNING_KEY\"] = PRIVATE_KEY\nSIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "REST_AUTH[\"JWT_AUTH_SECURE\"]",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "REST_AUTH[\"JWT_AUTH_SECURE\"] = True\nREST_AUTH[\"JWT_AUTH_COOKIE_DOMAIN\"] = \".waanverse.com\"\nSIMPLE_JWT[\"SIGNING_KEY\"] = PRIVATE_KEY\nSIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "REST_AUTH[\"JWT_AUTH_COOKIE_DOMAIN\"]",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "REST_AUTH[\"JWT_AUTH_COOKIE_DOMAIN\"] = \".waanverse.com\"\nSIMPLE_JWT[\"SIGNING_KEY\"] = PRIVATE_KEY\nSIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT[\"SIGNING_KEY\"]",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "SIMPLE_JWT[\"SIGNING_KEY\"] = PRIVATE_KEY\nSIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT[\"VERIFYING_KEY\"]",
        "kind": 5,
        "importPath": "base.settings.production",
        "description": "base.settings.production",
        "peekOfCode": "SIMPLE_JWT[\"VERIFYING_KEY\"] = PUBLIC_KEY",
        "detail": "base.settings.production",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "base.asgi",
        "description": "base.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "base.asgi",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "base.urls",
        "description": "base.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"accounts/\", include(\"accounts.urls\")),\n    path(\"accounts/\", include(\"dj_rest_auth.urls\")),\n    path(\"\", include(\"main.urls\")),\n]\nif settings.DEBUG:\n    urlpatterns+=path(\"__debug__/\", include(\"debug_toolbar.urls\")),\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "base.urls",
        "documentation": {}
    },
    {
        "label": "CustomPageNumberPagination",
        "kind": 6,
        "importPath": "base.utils",
        "description": "base.utils",
        "peekOfCode": "class CustomPageNumberPagination(PageNumberPagination):\n    def get_paginated_response(self, data):\n        return Response(\n            {\n                \"next\": self.get_next_page_number(),\n                \"previous\": self.get_previous_link(),\n                \"count\": self.page.paginator.count,\n                \"results\": data,\n            }\n        )",
        "detail": "base.utils",
        "documentation": {}
    },
    {
        "label": "CheckboxSelectMultipleWidget",
        "kind": 6,
        "importPath": "base.widgets",
        "description": "base.widgets",
        "peekOfCode": "class CheckboxSelectMultipleWidget(CheckboxSelectMultiple):\n    def render(self, name, value, attrs=None, renderer=None):\n        if value is None:\n            value = []\n        return super().render(name, value, attrs, renderer)",
        "detail": "base.widgets",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "base.wsgi",
        "description": "base.wsgi",
        "peekOfCode": "application = get_wsgi_application()\napp=application",
        "detail": "base.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "main.management.commands.backup",
        "description": "main.management.commands.backup",
        "peekOfCode": "class Command(BaseCommand):\n    help = \"Backup the database\"\n    def handle(self, *args, **options):\n        try:\n            # Generate a timestamp for the filename\n            timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n            # Construct the filename with the timestamp\n            filename = f\"backup-{timestamp}.json\"\n            # Get the backup directory from settings or use a default value\n            backup_directory = getattr(settings, \"BACKUP_DIRECTORY\", \"backups\")",
        "detail": "main.management.commands.backup",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0001_initial",
        "description": "main.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Post',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "main.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MainConfig",
        "kind": 6,
        "importPath": "main.apps",
        "description": "main.apps",
        "peekOfCode": "class MainConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'main'",
        "detail": "main.apps",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Post(models.Model):\n    content = models.TextField()\n    account = models.ForeignKey(Account, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    last_edited = models.DateTimeField(auto_now=True)\n    likes = models.ManyToManyField(Account, related_name=\"post_likes\", blank=True)\n    dislikes = models.ManyToManyField(\n        Account, related_name=\"post_dislikes\", blank=True\n    )\n    views = models.PositiveIntegerField(default=0)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "ContentImage",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class ContentImage(models.Model):\n    post = models.ForeignKey(\n        Post, on_delete=models.CASCADE, related_name=\"content_images\"\n    )\n    content_image = models.ImageField(upload_to=\"media/\")\n    image_hash = models.CharField(max_length=300, blank=True, null=True)\nclass Comment(models.Model):\n    content = models.TextField()\n    account = models.ForeignKey(Account, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Comment(models.Model):\n    content = models.TextField()\n    account = models.ForeignKey(Account, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    last_edited = models.DateTimeField(auto_now=True)\n    likes = models.ManyToManyField(Account, related_name=\"comment_likes\", blank=True)\n    dislikes = models.ManyToManyField(\n        Account, related_name=\"comment_dislikes\", blank=True\n    )\n    views = models.PositiveIntegerField(default=0)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "create_image_hash",
        "kind": 2,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "def create_image_hash(sender, instance, created, **kwargs):\n    if created:\n        if instance.content_image:\n            with Image.open(instance.content_image) as image:\n                image.thumbnail((100, 100))\n                hash = blurhash.encode(image, x_components=4, y_components=3)\n                instance.image_hash = hash\n                instance.save()",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "CreatePostSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class CreatePostSerializer(serializers.ModelSerializer):\n    content = serializers.CharField(style={\"base_template\": \"textarea.html\"})\n    taged_accounts = serializers.ListField(write_only=True, required=False)\n    class Meta:\n        model = Post\n        fields = [\"content\", \"account\", \"taged_accounts\"]\n    def create(self, validated_data):\n        taged_accounts_data = validated_data.pop(\"taged_accounts\", [])\n        files = self.context[\"request\"].FILES.getlist(\"files\")\n        # Create the post instance",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "ContentImageSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class ContentImageSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = ContentImage\n        fields = [\"content_image\", \"image_hash\", \"id\"]\nclass PostAccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = [\"username\", \"image\", \"id\", \"profile_image_hash\", \"verified\", \"name\"]\nclass PostSerializer(serializers.ModelSerializer):\n    account = PostAccountSerializer()",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "PostAccountSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class PostAccountSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = [\"username\", \"image\", \"id\", \"profile_image_hash\", \"verified\", \"name\"]\nclass PostSerializer(serializers.ModelSerializer):\n    account = PostAccountSerializer()\n    is_liked = serializers.SerializerMethodField()\n    is_disliked = serializers.SerializerMethodField()\n    taged_accounts=PostAccountSerializer(many=True)\n    post_images = ContentImageSerializer(",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "PostSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class PostSerializer(serializers.ModelSerializer):\n    account = PostAccountSerializer()\n    is_liked = serializers.SerializerMethodField()\n    is_disliked = serializers.SerializerMethodField()\n    taged_accounts=PostAccountSerializer(many=True)\n    post_images = ContentImageSerializer(\n        many=True, read_only=True, source=\"content_images\"\n    )\n    class Meta:\n        model = Post",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "SuggestedAccountsSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class SuggestedAccountsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Account\n        fields = [\"username\",\"id\",\"profile_image_hash\", \"verified\",\"image\",\"name\"]",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main.urls",
        "description": "main.urls",
        "peekOfCode": "urlpatterns = [\n    path(\"compose/\", create_post),\n    path(\"posts/\", posts),\n    path(\"like/<int:pk>/<str:type>/\", like_post),\n    path(\"unlike/<int:pk>/<str:type>/\", dislike_post),\n    path('post/<int:pk>/',post_detail),\n    path('post/images/<int:pk>/',get_post_image),\n    path('s/accounts/',get_accounts_to_tag)\n]",
        "detail": "main.urls",
        "documentation": {}
    },
    {
        "label": "Posts",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class Posts(generics.ListAPIView):\n    serializer_class = PostSerializer\n    def get_queryset(self):\n        user = self.request.user\n        is_admin = user.is_staff\n        user_agent = self.request.headers.get('User-Agent')\n        account_param = self.request.query_params.get(\"account\", None)\n        if account_param:\n            try:\n                account = Account.objects.get(username=account_param)",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "PostDetail",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class PostDetail(generics.RetrieveAPIView):\n    serializer_class = PostSerializer\n    def get_queryset(self):\n        user = self.request.user\n        # Filter posts based on privacy settings\n        queryset = (\n            Post.objects.select_related(\"account\")\n            .prefetch_related(\"likes\")\n        ).all()\n        return queryset",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def create_post(request):\n    if request.method == \"POST\":\n        serializer = CreatePostSerializer(\n            data=request.data, context={\"request\": request}\n        )\n        if serializer.is_valid():\n            serializer.save(account=request.user)\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    return Response(",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "like_post",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def like_post(request, pk, type=\"post\"):\n    try:\n        if type == \"post\":\n            post = get_object_or_404(Post, id=pk)\n        elif type == \"comment\":\n            pass\n            # post = get_object_or_404(Comment, id=pk)\n        else:\n            return Response(\n                {\"error\": \"Invalid type\"}, status=status.HTTP_400_BAD_REQUEST",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "dislike_post",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def dislike_post(request, pk, type=\"post\"):\n    try:\n        if type == \"post\":\n            post = get_object_or_404(Post, id=pk)\n        elif type == \"comment\":\n            pass\n            # post = get_object_or_404(Comment, id=pk)\n        else:\n            return Response(\n                {\"error\": \"Invalid type\"}, status=status.HTTP_400_BAD_REQUEST",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "get_post_image",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def get_post_image(request, pk):\n    try:\n        post = get_object_or_404(Post, id=pk)\n        images = ContentImage.objects.filter(post=post)\n        serializer = ContentImageSerializer(images, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    except Post.DoesNotExist:\n        return Response({\"error\": \"Post not found\"}, status=status.HTTP_404_NOT_FOUND)\n@api_view([\"GET\"])\ndef get_accounts_to_tag(request):",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "get_accounts_to_tag",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def get_accounts_to_tag(request):\n    account=request.GET.get('account',None)\n    if(account):\n        accounts=Account.objects.filter(username__icontains=account).exclude(id=request.user.id)\n        serializer=SuggestedAccountsSerializer(accounts,many=True)\n        return Response(serializer.data,status=status.HTTP_200_OK)\n    else:\n        return Response(status=status.HTTP_400_BAD_REQUEST)",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "posts",
        "kind": 5,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "posts = Posts.as_view()\n@api_view([\"POST\"])\ndef like_post(request, pk, type=\"post\"):\n    try:\n        if type == \"post\":\n            post = get_object_or_404(Post, id=pk)\n        elif type == \"comment\":\n            pass\n            # post = get_object_or_404(Comment, id=pk)\n        else:",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "post_detail",
        "kind": 5,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "post_detail = PostDetail.as_view()\n@api_view([\"GET\"])\ndef get_post_image(request, pk):\n    try:\n        post = get_object_or_404(Post, id=pk)\n        images = ContentImage.objects.filter(post=post)\n        serializer = ContentImageSerializer(images, many=True)\n        return Response(serializer.data, status=status.HTTP_200_OK)\n    except Post.DoesNotExist:\n        return Response({\"error\": \"Post not found\"}, status=status.HTTP_404_NOT_FOUND)",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "SocketsConfig",
        "kind": 6,
        "importPath": "sockets.apps",
        "description": "sockets.apps",
        "peekOfCode": "class SocketsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'sockets'",
        "detail": "sockets.apps",
        "documentation": {}
    },
    {
        "label": "Notifications",
        "kind": 6,
        "importPath": "sockets.consumers",
        "description": "sockets.consumers",
        "peekOfCode": "class Notifications(AsyncWebsocketConsumer):\n    async def connect(self):\n        await self.accept()\n        # Send a greeting message when the connection is established\n        await self.send(text_data=json.dumps({\"message\": \"Hello, World!\"}))\n    async def disconnect(self, close_code):\n        pass\n    async def receive(self, text_data):\n        data = json.loads(text_data)\n        # Process any received data if needed",
        "detail": "sockets.consumers",
        "documentation": {}
    },
    {
        "label": "websocket_urlpatterns",
        "kind": 5,
        "importPath": "sockets.routing",
        "description": "sockets.routing",
        "peekOfCode": "websocket_urlpatterns = [\n    path(\"\", Notifications.as_asgi()),\n]",
        "detail": "sockets.routing",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    dotenv.read_dotenv()\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", os.environ.get(\"DJANGO_SETTINGS_MODULE\", \"base.settings.production\"))\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"",
        "detail": "manage",
        "documentation": {}
    }
]